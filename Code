using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows.Forms;

namespace MonoalphabeticSubstitution
{
    public partial class MainForm : Form
    {
        private Dictionary<char, char> encryptionKey = new Dictionary<char, char>();
        private Dictionary<char, char> decryptionKey = new Dictionary<char, char>();

        public MainForm()
        {
            InitializeComponent();
            InitializeEncryptionKey();
            InitializeDecryptionKey();
        }

        private void InitializeEncryptionKey()
        {
            // Initialize the encryption key with a basic substitution
            string alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
            for (int i = 0; i < alphabet.Length; i++)
            {
                char original = alphabet[i];
                char substitute = alphabet[(i + 1) % alphabet.Length];
                encryptionKey.Add(original, substitute);
            }
        }

        private void InitializeDecryptionKey()
        {
            // Initialize the decryption key with the inverse of the encryption key
            decryptionKey = encryptionKey.ToDictionary(x => x.Value, x => x.Key);
        }

        private string Encrypt(string plaintext)
        {
            char[] encryptedChars = plaintext.ToUpper().Select(c => encryptionKey.ContainsKey(c) ? encryptionKey[c] : c).ToArray();
            return new string(encryptedChars);
        }

        private string Decrypt(string ciphertext)
        {
            char[] decryptedChars = ciphertext.ToUpper().Select(c => decryptionKey.ContainsKey(c) ? decryptionKey[c] : c).ToArray();
            return new string(decryptedChars);
        }

        private void btnEncrypt_Click(object sender, EventArgs e)
        {
            string plaintext = txtInput.Text;
            string ciphertext = Encrypt(plaintext);
            txtOutput.Text = ciphertext;
        }

        private void btnDecrypt_Click(object sender, EventArgs e)
        {
            string ciphertext = txtInput.Text;
            string decryptedText = Decrypt(ciphertext);
            txtOutput.Text = decryptedText;
        }
    }
}
